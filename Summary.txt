------------    Presentation    ------------

We will learn how to improve our code in C# following the best standards in the Software Development industry.

We will use code that already exists and works, but does not have best practices. Therefore, we will modify the code so that it meets the best standards of good practices but without affecting the functionality of the application.

At the end of the course we will have a very different code but it will work exactly the same, so the user should not notice the changes we make.


https://en.wikipedia.org/wiki/Characterization_test









------------    Prerequisites    ------------

- Knowledge in C# and .NET.

- Knowledge at Git.

- Visual Code or Visual Studio

- .NET 6 or superior.









------------    Terminology - Good practices, refactoring, clean code, technical debt    ------------

Terminology:

- Best Practices : 

 Good practices are proven and verified standards.
 
 Good practices solve challenges based on common scenarios.
 
 They provide guides that are easy to learn and understand.
 
 They allow having a similar structure for multiple projects.
 
 "The good practices we will learn will also be useful for many other languages."
 
 
 - Clean Code :
 
 It is a code that follows good practices. Allowing the reduction of the code and making it better readable.
 
 Easy to understand and analyze code
 
 Easy to maintain code
 
 Easy to update code.
 
 Easy to scale code.




How do we get a Clean Code?.

There are different techniques to obtain a Clean Code, among them we can highlight the following:

* Keep the coupling low. It refers to the use of abstract types, abstract classes and Interfaces, avoiding direct dependencies between system components.

* Use simple and modern syntax

* Avoid incorporating many third-party libraries.

* Distribution of responsibilities

* Creation of small components.


- Technical Debt:

 It refers to the technical problems that the software may have that are acquired during the development phase and that must be solved in the future.
  
 It can be present in any aspect of an application such as: Security, Performance, Scalability, etc.
 
 Sometimes it can be more expensive than the development itself.



- Refactoring:

 Process of changes to a code for improvement in any aspect (performance, security, readability, support, etc.).
 
 The most important thing is to make the changes while maintaining the business logic without affecting it.
  
 It must be recurring.
 
 Reduces future technical debt.
 








------------    Download and analysis of the project to work on    ------------

The downloaded project works correctly, but contains bad practices.

We must modify part of the code applying good practices but without altering the operation.
La funcionalidad del proyecto descargado es la de agregar, eliminar y mostrar tareas.

We run the command "dotnet build" to compile and "dotnet run" to run the project.









------------    Appointment    ------------

° VARIABLES

- Bad of naming of variables:
int d,a,bgt,rec;


- Correct naming of variables :
int daySinceModification;


"Variable names should be as describable as possible."



° METHODS

- Bad naming of methods:
public List<Users> getUsers(){}



- Correct naming of methods (Pascal Case):
public List<Users> GetActiveUsers(){}


"Method names should follow the "Pascal Case" style".

Pascal Case notation consists of beginning each word with a capital letter, while the rest of the words must be lowercase.



° CLASS

- Class misnomer:
public class ClassUser2


- Correct naming of classes:
public class User

"The word 'Class' should not be used when naming a Class. This is called Hungarian Notation, it is used in older languages. It is also very bad practice to use numbers in Class naming, perhaps in some cases it could be used for Variable naming, but it is not good practice to use it in Class and Method naming."


If we have different 'Users', we can look for words to differentiate one from another, for example 'DefaultUser' or 'CustomUser' and thus differentiate them from the 'User' of the main Class.


Sources:

https://mteheran.dev/buenas-practicas-al-nombrar-variables-en-c/
https://www.neoguias.com/tipos-notacion-nombres/#Pascal_Case_ContarElementos
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions


We go to the code to apply these Good Practices.









------------    Code Smells (Algo huele mal)    ------------

The concept of "Code Smells" occurs when we analyze our code and feel that something in the code is wrong.

When we see some code we should feel that feeling that something is not right.

We have already seen one of the "Codes Smells" : The appointment.

Another "Code Smells" is having very large methods and classes. Although there is no standard for how many lines a Class or Method can have, if a Class exceeds one thousand lines or fifteen hundred lines it is because that Class has many responsibilities and could divide or distribute those responsibilities among other Classes or Components.

Another "Code Smell" occurs when too many parameters are used, this means that there is too much logic in that function and then something is wrong.

Another "code smell" occurs with magic numbers. It is when numbers are used directly in the code, this is called “Hard Code”, and we do not know what their functions are. This is bad practice because it does not help the developer understand what is being done in the code, so they must perform code analysis to discern it.

There are other Code Smells, we have simply named a few of them.

Of all the Code Smells we've seen, the only one that applies to our code is magic numbers, because the project is quite small.

Let's go to our code and check the magic numbers code smell.

Other sources:

https://www.c-sharpcorner.com/UploadFile/3ab935/how-does-your-code-smell/
https://www.ionos.es/digitalguide/paginas-web/desarrollo-web/code-smell/
https://rules.sonarsource.com/csharp/type/Code%20Smell/









------------    DRY Principle    ------------

DRY : Don´t Repeat Yourself.

Principle that consists of avoiding code repetition.

The intention is to reuse the code.

The reason this mistake is often made is that we are constantly copying and pasting code.

Copying and pasting code is not bad, but we must understand how it works to know how to adapt it to our project and in this way reuse it in different parts.

Typically, there are two ways to duplicate code:

Sometimes we have exactly duplicate sections of code.
We could just reuse in a function.

On other occasions there are small code routines that are very similar but separate. When we have this type of routines we must find a way to create a common routine or function in which we can define different behaviors through parameters.
In this way we would no longer have three or four different functions, but only one that will be in charge of doing what the three did through different parameters.

Let's go to our code and we apply this principle DRY.









------------    KISS Principle    ------------

Keep it Simple Stupid.

We must try to simplify our code as much as possible, without creating many components.

We have to start dividing responsibilities, this is part of Good Practices, but many times we complicate things unnecessarily and obtain what is called “Over-Architecture”.

This happens when we design our application too large or complex to solve a problem that is extremely simple.

We must always apply the best solution depending on the complexity of the problem.
When the problem is complex then the solutions will be complex, but if the problem is simple then we must apply a fairly simple solution.

This principle is also known as “Keep It Short and Simple”, in this way we can mention this principle a little more harmonious.

Let´s go to our code and we apply this principle.


Other sources:

https://medium.com/swlh/is-using-linq-in-c-bad-for-performance-318a1e71a732
https://markheath.net/post/linq-performance#:~:text=It%20is%20slightly%20slower&text=LINQ%20syntax%20is%20typically%20less,like%20BenchmarkDotNet%20to%20do%20so









------------    Using Try Catch    ------------

We will learn the proper use of the Try Catch. 

We use it when we have exceptional cases or unexpected errors that could occur. With Try Catch we catch errors and then do something additional.

It is a good practice to use try catch in our code.

We implement it when we want to return a specific value after performing the check.

The try catch affects the performance of the application.

If possible, we should use validations instead of Try Catches.

Let's go to the code and see how we can use try catch in the best possible way.


It is not good practice to have an empty catch, which does not return anything or notify the user that an error has occurred, nor does it store the error in any log so that developers are aware of errors.


In the next class we will analyze the improvements in C# and how these improvements in the language's syntax can help us minimize the code, allowing the code to be much more readable.









------------    Evolution of C#    ------------

* "Auto Property Initializer" - C# V6

It allows us to add a default value to a property within a Class, saving us a line of code.


Example:
public string MyVar {get; set;} = "Hellow World";



* "String Interpolation" - C# V6

Existing in other programming languages.

It allows us to use a syntax, in this case using the $ symbol and the {}, to be able to concatenate texts with variables in a more orderly and elegant way.


Example: 
string MyVar = "Hello World";
Console.WriteLine($"The message is: {MyVar}."); 



* "Expression - Bodied Function" - C# V6

It allows us to create features more quickly.

Create a function using the arrow operator, as long as this function has a single action or contains a single line.


Example:

public int Sum2Numbers(int x, int y) => (x + y);

This function returns the sum of x and y.



* "Null Conditional Operator" - C# V6

This operator allows us to check if a property is null when performing an evaluation.

By applying this, we save a "if" and improve the readability of the code.

This is one of the improvements that we will apply within the code.


Example:

Datetime? datetime = new DateTime();

//using ? asking if the value is null
var YearOfDate = datetime?,Year;

Console.WriteLine(YearOfDate);

var YearOfDateCondicional = datetime?.Year ?? 0;



* "Local Functions" - C# V7

It allows us to create functions inside methods.
In this way we can structure the code better, if we notice that the code is very large within this method, then we can divide it into small functions.


Example :

static void Main(string[] args)
{
	int Sum(int x, int y)
	{
		return x + y;
	}
	Console.WriteLine(Sum(10,20));
	Console.ReadKey();
}



* "Digital Separator" - C# V7

It allows us to use the underscore to separate the characters of a number.

Let's remember that it is not good to have these codes placed as such within the application but it is often necessary to do so. If this scenario occurs we can apply this improvement.


Example :

public const long BilliondsAndBillions = 100_000_000_000;



* "Tuples" - C# V7

It allows us to go back to a combination of different values ​​and different types.

This is very practical when we not only need to return a primitive type but we can return a type composed of several primitive types.


Example :

var named = {first: "one", second: "two"};

//Method returning a tuple
(bool bresult, doublé dcalculation) = Tuples.CalculationTuple();


This example returns a bool type and a double type.



* "Switch as expression" - C# V8

Reduce the syntax of a Switch when its only function is to return a value.


Example :

int intValueForSwitch = 0;

var state = (intValueForSwitch) switch
{
	(0) => "Zero",
	(1) => "One",
	(2) => "Two",
	_ => "NO valid number"
};



* "Top - level statement" - C# V9

It allows us to eliminate that generic structure that we normally have in C#.


Example :

//Without apply
 
using System;
namespace HelloWorld
{
	class Program
	{
		static void Main(string[] args)
		{
			Console.WriteLine("Hello World");
		}
	}
}

//applying the improvement

using System;
Console.WriteLine("Hello World");



* "Global Using" - C# V10

It helps us minimize the code since we don't have to write and use all the usage that .NET Core does.

In this way the code automatically detects the sentences.


Example :

Console.WriteLine("Hello World!");




Other sources:

https://dev.to/mteheran/c-evolution-3o9o
https://learn.microsoft.com/es-es/dotnet/csharp/whats-new/csharp-version-history
https://learn.microsoft.com/es-ES/dotnet/csharp/whats-new/csharp-11
https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-11









------------    String Interpolation, Initializer, and Null Conditional Operator    ------------

In this class we will apply three of the improvements that we learned in the previous class.

Let's go to the code and apply it.



Let's start with "String Interpolation", this applies whenever text is combined with variables or functions.

An example in our project is the following:

Console.WriteLine("Tarea " + taskToRemove + " eliminada");

Applying the improvement:

Console.WriteLine($"Tarea {taskToRemove} eliminada");



Another improvement that we can apply is that of the Initializer:
We can initialize our "TaskList" in a single line.



Finally we can apply the null conditional operator.
It is used in those places where it is asked whether a variable is null or not.

Inside "ShowMenuTaskList" we can apply this improvement.

Having :

if (TaskList == null || TaskList.Count == 0){...}

We can modify the condition:

if (TaskList?.Count>0){...}

So the "if" will only be executed if the elements of "TaskList" are greater than zero.

When inverting the conditions we must also invert the "if" and "else" codes.

Other Sources:
https://code-maze.com/any-vs-count-dotnet/
