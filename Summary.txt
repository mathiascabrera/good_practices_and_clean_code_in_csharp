------------    Presentation    ------------

We will learn how to improve our code in C# following the best standards in the Software Development industry.

We will use code that already exists and works, but does not have best practices. Therefore, we will modify the code so that it meets the best standards of good practices but without affecting the functionality of the application.

At the end of the course we will have a very different code but it will work exactly the same, so the user should not notice the changes we make.


https://en.wikipedia.org/wiki/Characterization_test









------------    Prerequisites    ------------

- Knowledge in C# and .NET.

- Knowledge at Git.

- Visual Code or Visual Studio

- .NET 6 or superior.









------------    Terminology - Good practices, refactoring, clean code, technical debt    ------------

Terminology:

- Best Practices : 

 Good practices are proven and verified standards.
 
 Good practices solve challenges based on common scenarios.
 
 They provide guides that are easy to learn and understand.
 
 They allow having a similar structure for multiple projects.
 
 "The good practices we will learn will also be useful for many other languages."
 
 
 - Clean Code :
 
 It is a code that follows good practices. Allowing the reduction of the code and making it better readable.
 
 Easy to understand and analyze code
 
 Easy to maintain code
 
 Easy to update code.
 
 Easy to scale code.




How do we get a Clean Code?.

There are different techniques to obtain a Clean Code, among them we can highlight the following:

* Keep the coupling low. It refers to the use of abstract types, abstract classes and Interfaces, avoiding direct dependencies between system components.

* Use simple and modern syntax

* Avoid incorporating many third-party libraries.

* Distribution of responsibilities

* Creation of small components.


- Technical Debt:

 It refers to the technical problems that the software may have that are acquired during the development phase and that must be solved in the future.
  
 It can be present in any aspect of an application such as: Security, Performance, Scalability, etc.
 
 Sometimes it can be more expensive than the development itself.



- Refactoring:

 Process of changes to a code for improvement in any aspect (performance, security, readability, support, etc.).
 
 The most important thing is to make the changes while maintaining the business logic without affecting it.
  
 It must be recurring.
 
 Reduces future technical debt.
 








------------    Download and analysis of the project to work on    ------------

The downloaded project works correctly, but contains bad practices.

We must modify part of the code applying good practices but without altering the operation.
La funcionalidad del proyecto descargado es la de agregar, eliminar y mostrar tareas.

We run the command "dotnet build" to compile and "dotnet run" to run the project.









------------    Appointment    ------------

° VARIABLES

- Bad of naming of variables:
int d,a,bgt,rec;


- Correct naming of variables :
int daySinceModification;


"Variable names should be as describable as possible."



° METHODS

- Bad naming of methods:
public List<Users> getUsers(){}



- Correct naming of methods (Pascal Case):
public List<Users> GetActiveUsers(){}


"Method names should follow the "Pascal Case" style".

Pascal Case notation consists of beginning each word with a capital letter, while the rest of the words must be lowercase.



° CLASS

- Class misnomer:
public class ClassUser2


- Correct naming of classes:
public class User

"The word 'Class' should not be used when naming a Class. This is called Hungarian Notation, it is used in older languages. It is also very bad practice to use numbers in Class naming, perhaps in some cases it could be used for Variable naming, but it is not good practice to use it in Class and Method naming."


If we have different 'Users', we can look for words to differentiate one from another, for example 'DefaultUser' or 'CustomUser' and thus differentiate them from the 'User' of the main Class.


Sources:

https://mteheran.dev/buenas-practicas-al-nombrar-variables-en-c/
https://www.neoguias.com/tipos-notacion-nombres/#Pascal_Case_ContarElementos
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions


We go to the code to apply these Good Practices.









------------    Code Smells (Algo huele mal)    ------------

The concept of "Code Smells" occurs when we analyze our code and feel that something in the code is wrong.

When we see some code we should feel that feeling that something is not right.

We have already seen one of the "Codes Smells" : The appointment.

Another "Code Smells" is having very large methods and classes. Although there is no standard for how many lines a Class or Method can have, if a Class exceeds one thousand lines or fifteen hundred lines it is because that Class has many responsibilities and could divide or distribute those responsibilities among other Classes or Components.

Another "Code Smell" occurs when too many parameters are used, this means that there is too much logic in that function and then something is wrong.

Another "code smell" occurs with magic numbers. It is when numbers are used directly in the code, this is called “Hard Code”, and we do not know what their functions are. This is bad practice because it does not help the developer understand what is being done in the code, so they must perform code analysis to discern it.

There are other Code Smells, we have simply named a few of them.

Of all the Code Smells we've seen, the only one that applies to our code is magic numbers, because the project is quite small.

Let's go to our code and check the magic numbers code smell.

Other sources:

https://www.c-sharpcorner.com/UploadFile/3ab935/how-does-your-code-smell/
https://www.ionos.es/digitalguide/paginas-web/desarrollo-web/code-smell/
https://rules.sonarsource.com/csharp/type/Code%20Smell/









------------    DRY Principle    ------------

DRY : Don´t Repeat Yourself.

Principle that consists of avoiding code repetition.

The intention is to reuse the code.

The reason this mistake is often made is that we are constantly copying and pasting code.

Copying and pasting code is not bad, but we must understand how it works to know how to adapt it to our project and in this way reuse it in different parts.

Typically, there are two ways to duplicate code:

Sometimes we have exactly duplicate sections of code.
We could just reuse in a function.

On other occasions there are small code routines that are very similar but separate. When we have this type of routines we must find a way to create a common routine or function in which we can define different behaviors through parameters.
In this way we would no longer have three or four different functions, but only one that will be in charge of doing what the three did through different parameters.

Let's go to our code and we apply this principle DRY.